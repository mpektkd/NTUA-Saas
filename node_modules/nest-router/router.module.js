"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var RouterModule_1;
const common_1 = require("@nestjs/common");
const constants_1 = require("@nestjs/common/constants");
const modules_container_1 = require("@nestjs/core/injector/modules-container");
const unknown_element_exception_1 = require("@nestjs/core/errors/exceptions/unknown-element.exception");
const validate_path_util_1 = require("./utils/validate-path.util");
const flat_routes_util_1 = require("./utils/flat-routes.util");
/**
 * A utility Module to Organize your Routes,
 * it could be imported in the Root Module of you application.
 */
let RouterModule = RouterModule_1 = class RouterModule {
    constructor(modulesContainer) {
        this.modulesContainer = modulesContainer;
        const modules = [...modulesContainer.values()];
        for (const nestModule of modules) {
            const modulePath = Reflect.getMetadata(constants_1.MODULE_PATH, nestModule.metatype);
            for (const route of nestModule.routes.values()) {
                RouterModule_1.routesContainer.set(route.name, validate_path_util_1.validatePath(modulePath));
            }
        }
    }
    /**
     * takes an array of modules and organize them in hierarchy way
     * @param {Routes} routes Array of Routes
     */
    static forRoutes(routes) {
        RouterModule_1.buildPathMap(routes);
        return {
            module: RouterModule_1,
        };
    }
    /**
     * get the controller full route path eg: (controller's module prefix + controller's path).
     * @param {Type<Controller>} controller the controller you need to get it's full path
     */
    static resolvePath(controller) {
        const controllerPath = Reflect.getMetadata(constants_1.PATH_METADATA, controller);
        const modulePath = RouterModule_1.routesContainer.get(controller.name);
        if (modulePath && controllerPath) {
            return validate_path_util_1.validatePath(modulePath + validate_path_util_1.validatePath(controllerPath));
        }
        else {
            throw new unknown_element_exception_1.UnknownElementException();
        }
    }
    static buildPathMap(routes) {
        const flattenRoutes = flat_routes_util_1.flatRoutes(routes);
        flattenRoutes.forEach(route => {
            Reflect.defineMetadata(constants_1.MODULE_PATH, validate_path_util_1.validatePath(route.path), route.module);
        });
    }
};
RouterModule.routesContainer = new Map();
RouterModule = RouterModule_1 = __decorate([
    common_1.Module({}),
    __metadata("design:paramtypes", [modules_container_1.ModulesContainer])
], RouterModule);
exports.RouterModule = RouterModule;
//# sourceMappingURL=router.module.js.map